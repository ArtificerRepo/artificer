AddEntryArchiveCommand.usage=archive:addEntry <archivePath> <srampArtifactType> [<pathToFileContent>]
AddEntryArchiveCommand.help=The "addEntry" command provides a way to add a single entry to the \ncurrently open Artificer batch archive.  The command requires a path \nwithin the archive to be specified.  In addition, the type of \nartifact must be included along with an optional path to a file \nrepresenting the content.\n\nExample Usage\:\n> archive\:addEntry /artifacts/myfile.xml XmlDocument /home/uname/artifacts/myfile.xml\n> archive\:addEntry /artifacts/no-content.artifact MyLogicalArtifact
CloseArchiveCommand.usage=archive:close
CloseArchiveCommand.help=This command will close the currently open Artificer archive.  If\nno archive is currently open, this command does nothing.
ListArchiveCommand.usage=archive:list
ListArchiveCommand.help=This command display a list of the entries in the currently\nopen Artificer archive.
ListEntryArchiveCommand.usage=archive:listEntry <archivePath>
ListEntryArchiveCommand.help=The "listEntry" command is used to display information about\na single entry in the currently open Artificer archive.  The\npath within the archive must be specified.
NewArchiveCommand.usage=archive:new
NewArchiveCommand.help=The "new" operation creates and opens an empty Artificer archive.
OpenArchiveCommand.usage=archive:open <pathToArchive>
OpenArchiveCommand.help=The "open" operation opens an existing Artificer batch archive\nfile.  Once open, the contents of the archive can be modified\nor just listed.
PackArchiveCommand.usage=archive:pack <outputLocation>
PackArchiveCommand.help=The "pack" command packages up the currently open Artificer batch\narchive file.  The Artificer batch archive is zip''d up and then\ncopied to the output file location provided.
UploadArchiveCommand.usage=archive:upload
UploadArchiveCommand.help=The "upload" command uploads the currently active Artificer archive to\nthe Artificer repository (closing the archive if it is open).\n\nExample usages\:\n>  s-ramp\:upload
RemoveEntryArchiveCommand.usage=archive:removeEntry <archivePath>
RemoveEntryArchiveCommand.help=The "removeEntry" command will remove a single entry from the\ncurrently open Artificer batch archive.  The path to the entry\nmust be specified.
UpdateEntryArchiveCommand.usage=archive\:updateEntry <archivePath> <subCommand> <subCommandArgs>\n\n\tSub-Commands\n\t------------\n\tsetContent <pathToFileContent>\n\tsetProperty <propertyName> <propertyValue>\n\tsetRelationship <relationshipType> <targetUUID>
UpdateEntryArchiveCommand.help=The "updateEntry" command is used to modify entries in the\ncurrently open Artificer batch archive.  The path to the entry\nmust be specified, along with details about how the entry is\nto be modified.\n\n setContent\: a sub-command that sets the file content on a \n      particular entry\n setProperty\: a sub-command that sets a single custom Artificer\n      property on the entry\n setRelationship\: a sub-command that sets a single generic\n      Artificer relationship on the entry
ShowAuditTrailCommand.usage=audit\:showAuditTrail <artifactId>\n\tValid formats for artifactId\:\n\t  feed\:<feedIndex> - an index into the most recent feed\n\t  uuid\:<srampUUID> - the UUID of an s-ramp artifact
ShowAuditTrailCommand.help=The "showAuditTrail" command displays a list of all the audit\nentries for a given artifact.  Use this command to see how an\nartifact has been modified over time.\n\nExample usage\:\n> audit\:showAuditTrail feed\:3\n> audit\:showAuditTrail uuid\:7387-28732-9183-92737
ClassificationCommand.usage=classification <subCommand> <subCommandArguments>
ClassificationCommand.help=The "classification" command manipulates the classifications of the\ncurrently active Artificer artifact.  The artifact must first be in the\ncurrent session through the s-ramp\:getMetaData command.  This command\nadds or removes classifications on that active artifact.\n\nSupported sub-commands\:  add, remove, clear\n\nExample usage\:\n>  s-ramp\:classification add http\://www.example.org/regions.owl\#China\n>  s-ramp\:classification remove http\://www.example.org/regions.owl\#China\n>  s-ramp\:classification clear
ConnectCommand.usage=connect <endpointUrl> [username password] [--disableValidation]
ConnectCommand.help=The "connect" command creates a connection to a remote\nArtificer repository at its Atom endpoint.  The connection\nto the repository will be validated unless the \n"--disableValidation" option is set.\n\nExample usage\:\n>  s-ramp\:connect http\://localhost\:8080/s-ramp-server\n>  s-ramp\:connect http\://example.org/s-ramp --disableValidation\n>  s-ramp\:connect http\://localhost\:8080/s-ramp-server admin password
DeleteCommand.usage=s-ramp\:delete [<artifactId>]\n\tValid formats for artifactId\:\n\t  feed\:<feedIndex> - an index into the most recent feed\n\t  uuid\:<srampUUID> - the UUID of an s-ramp artifact
DeleteCommand.help=The "delete" command removes an artifact from the Artificer\nrepository.  The artifact can be identified either by its\nunique Artificer uuid or else by an index into the most recent\nFeed.  Additionally, the currently active artifact can be\ndeleted by omitting the <artifactId> argument.\n\nNote\: a Feed can be obtained, for example, by using the \ns-ramp\:query command.\n\nExample usage\:\n>  s-ramp\:delete\n>  s-ramp\:delete feed\:1\n>  s-ramp\:delete uuid\:2832-3183-2937-9983
DisconnectCommand.usage=disconnect
DisconnectCommand.help=The "disconnect" command disconnects from the currently\nactive Artificer repository.\n\nExample usage\:\n>  s-ramp\:disconnect
GetContentCommand.usage=s-ramp\:getContent <artifactId> <outputFilePath>\n\tValid formats for artifactId\:\n\t  feed\:<feedIndex> - an index into the most recent feed\n\t  uuid\:<srampUUID> - the UUID of an s-ramp artifact
GetContentCommand.help=The "getContent" command downloads the file content for\na single artifact from the Artificer repository.  The artifact\ncan be identified either by its unique Artificer uuid or else\nby an index into the most recent Feed.\n\nNote\: a Feed can be obtained, for example, by using the \ns-ramp\:query command.\n\nExample usage\:\n>  s-ramp\:query /s-ramp/wsdl/WsdlDocument\n>  s-ramp\:getContent feed\:1 /home/user/files/
GetMetaDataCommand.usage=s-ramp\:getMetaData <artifactId> [<outputFilePath>]\n\tValid formats for artifactId\:\n\t  feed\:<feedIndex> - an index into the most recent feed\n\t  uuid\:<srampUUID> - the UUID of an s-ramp artifact
GetMetaDataCommand.help=The "getMetaData" command downloads only the meta-data for\na single artifact from the Artificer repository.  The artifact\ncan be identified either by its unique Artificer uuid or else\nby an index into the most recent Feed.  The meta-data will\neither be displayed or saved to a local file, depending on\nwhether a path to an output file (or directory) is provided.\n\nNote\: a Feed can be obtained, for example, by using the \ns-ramp\:query command.\n\nExample usage\:\n>  s-ramp\:getMetaData feed\:1 /home/user/files/\n>  s-ramp\:getMetaData uuid\:7387-28732-9183-92737
PropertyCommand.usage=property <subCommand> <subCommandArguments>
PropertyCommand.help=The "property" command manipulates the properties of the currently\nactive Artificer artifact.  The artifact must first be in the current\nsession through the s-ramp\:getMetaData command.  This command sets\nor unsets properties on that active artifact.  Both core meta-data\nproperties and custom (user-defined) properties can be manipulated\nusing this command.\n\nSupported sub-commands\:  set, unset\n\nExample usage\:\n>  s-ramp\:property set name MyArtifactName\n>  s-ramp\:property set customProp customVal\n>  s-ramp\:property unset customProp
QueryCommand.usage=query <srampQuery>
QueryCommand.help=The "query" command issues a standard Artificer formatted\nquery against the Artificer server.  The query will result\nin a Feed of entries.\n\nExample usage\:\n>  s-ramp\:query /s-ramp/wsdl/WsdlDocument\n>  s-ramp\:query "/s-ramp/wsdl[@name \= ''find'']"
RefreshMetaDataCommand.usage=refreshMetaData
RefreshMetaDataCommand.help=The "refreshMetaData" command downloads the latest meta-data for\na single artifact from the Artificer repository.  The artifact in\nquestion is the currently active artifact in the session.  If no\nartifact is currently active, then this command will fail.  This\nessentially re-downloads the meta-data for the current artifact\nand replaces any changes that may have existed there.\n\nExample usage\:\n>  s-ramp\:refreshMetaData
ShowMetaDataCommand.usage=showMetaData
ShowMetaDataCommand.help=The "showMetaData" command prints out the meta-data for the\nartifact currently active in the session.\n\nExample usage\:\n>  s-ramp\:showMetaData
StatusCommand.usage=status
StatusCommand.help=The "status" command displays the current Artificer status.\n\nExample usage\:\n>  s-ramp\:status
UpdateMetaDataCommand.usage=updateMetaData
UpdateMetaDataCommand.help=The "updateMetaData" command updates the meta-data of the currently active\nartifact in the context.  Whatever changes were made to the active\nartifact will be sent back to the Artificer repository.\n\nExample usage\:\n>  s-ramp\:updateMetaData
UploadArtifactCommand.usage=upload <pathToArtifactContent> [<artifactType>]
UploadArtifactCommand.help=The "upload" command uploads the content of a local file to\nthe Artificer repository, creating a new artifact.  The artifact\ntype can optionally be provided.  If excluded, the artifact\ntype will be determined based on file extension.\n\nExample usages\:\n>  s-ramp\:upload /home/uname/files/mytypes.xsd\n>  s-ramp\:upload /home/uname/files/myservice.wsdl WsdlDocument
CreateArtifactCommand.usage=create type name [description]
CreateArtifactCommand.help=The "create" command creates a new artifact in the\nArtificer repository, without file content.  The artifact\ntype and name must be provided, along with an optional\ndescription.\n\nExample usages\:\n>  s-ramp\:create HumanActor bwayne "An actor who also wears a stylish belt."\n>  s-ramp\:create MyCustomArtifactType "Name of my artifact"
DeleteOntologyCommand.usage=ontology\:delete <ontologyId>\n\tValid formats for ontologyId\:\n\t  feed\:<feedIndex> - an index into the most recent list of ontologies\n\t  uuid\:<ontologyUUID> - the UUID of an ontology
DeleteOntologyCommand.help=The "delete" command removes a single ontology from the Artificer\nrepository.\n\nExample usage\:\n> ontology\:delete feed\:2\n> ontology\:delete uuid\:2763-2382-39293-382873
ListOntologiesCommand.usage=ontology:list
ListOntologiesCommand.help=The "list" command displays a list of all the ontologies\ncurrently known to the Artificer repository.  This list may be\nempty if no ontologies have yet been added to the repository.\n\nExample usage\:\n> ontology\:list
UploadOntologyCommand.usage=ontology:upload <pathToOntologyFile>
UploadOntologyCommand.help=The "upload" command uploads a new OWL ontology file to the\nArtificer repository.  This makes the classes defined in the OWL\nontology available for use as classifications on artifacts.\n\nExample usage\:\n>  ontology\:upload /home/uname/files/regions.owl.xml
GetOntologyCommand.usage=ontology\:get <ontologyId> [localFilePath]\n\tValid formats for ontologyId\:\n\t  feed\:<feedIndex> - an index into the most recent list of ontologies\n\t  uuid\:<ontologyUUID> - the UUID of an ontology
GetOntologyCommand.help=The "get" command retrieves a single ontology from the Artificer\nrepository, optionally saving it to a local file.\n\nExample usage\:\n> ontology\:get feed\:2\n> ontology\:get uuid\:2763-2382-39293-382873 ../my-ontology.owl
UpdateOntologyCommand.usage=ontology\:update <ontologyId> <pathToOntologyFile>\n\tValid formats for ontologyId\:\n\t  feed\:<feedIndex> - an index into the most recent list of ontologies\n\t  uuid\:<ontologyUUID> - the UUID of an ontology
UpdateOntologyCommand.help=The "update" command updates the structure of an existing\nontology in the Artificer repository.\n\nExample usage\:\n>  ontology\:update feed\:2 /home/uname/files/regions_v2.owl.xml
EchoCommand.usage=echo <message>
EchoCommand.help=The "echo" command simply prints a provided message to the console.
COMMAND_NOT_FOUND=Command not found.  Try "help" for a list of available commands.
GOOD_BYE=Good bye!
Help.COMMAND_LIST_MSG=The Artificer Shell supports the following commands:
Help.COMMAND_LIST_MSG_2=The Artificer Shell supports the following commands for the "{0}" namespace:
Help.HELP_PER_CMD_MSG=To get help for a specific command, try "help <cmdNamespace>:<cmdName>".
Help.INVALID_COMMAND=No help available:  not a valid command.
Help.USAGE=USAGE
Help.GET_HELP_1=To get help for a specific command, try "help <cmdNamespace>:<cmdName>".
Help.GET_HELP_2=To execute a specific command, try "<namespace>\:<commandName> <args>".\nSome examples\:\n   s-ramp\:connect http\://localhost\:8080/s-ramp-server\n   archive\:open /home/uname/files/my-package.sramp
Shell.EXITING=Exiting s-ramp shell due to an error.
Shell.INVALID_ARG=Invalid argument:  {0}
Shell.USAGE=Usage:
Shell.SHUTTING_DOWN=Artificer shell shutting down...
Shell.DONE=done.
InvalidArgMsg.EntryPath=Please include an entry path (relative archive path).
AddEntry.InvalidArgMsg.ArtifactType=Please include an artifact type.
NO_ARCHIVE_OPEN=No Artificer archive is currently open.
AddEntry.Added=Entry added to Artificer archive:  {0}
CloseArchive.Closed=Artificer archive closed (and deleted if appropriate).
ENTRY_PATH=  Entry Path
ENTRY_LIST_SUMMARY=  {0} entries
ENTRY=Entry: {0}
NewArchive.AlreadyOpen=An Artificer archive is already open.  Please archive:close it before creating a new one.
NewArchive.Opened=New Artificer batch archive opened.
OpenArchive.InvalidArgMsg.PathToArchive=Please supply the path to an Artificer batch archive file.
OpenArchive.AlreadyOpen=An Artificer archive is already open.  Please archive:close it before creating a new one.
OpenArchive.Opened=Artificer batch archive opened from {0}
PackArchive.InvalidArgMsg.OutputLocation=Please include the output location (file path).
PackArchive.OutputLocAlreadyExists=Output location already exists!
PackArchive.Packaged=Artificer archive packaged and copied to: {0}
RemoveEntry.EntryDeleted=The Artificer archive entry was successfully deleted.
RemoveEntry.NoEntryFound=No Artificer archive entry could be found at path: {0}
UpdateEntry.InvalidArgMsg.SubCommand=Please specify a sub-command.
UpdateEntry.EntryNotFound=Archive Entry not found: {0}
UpdateEntry.InvalidArgMsg.MissingPath=Please specify a path to the content file.
UpdateEntry.FileNotFound=File not found: {0}
UpdateEntry.SuccessMsg=Entry (content) successfully set.
UpdateEntry.InvalidArgMsg.PropertyName=Please specify the name of the property.
UpdateEntry.MetaDataSuccessMsg=Entry (meta-data) successfully set.
UpdateEntry.NotYetImplemented.Relationships=setRelationship sub-command not yet implemented.
AuditTrail.InvalidArgMsg.ArtifactId=Please specify a valid artifact identifier.
InvalidArtifactIdFormat=Invalid artifact id format.
AuditEntryLabel=Audit Entry
MissingArtificerConnection=No Artificer repository connection is currently open.
FeedIndexOutOfRange=Feed index out of range.
NoFeed=There is no current feed available.  Try "query" first.
InvalidIdFormat=Invalid artifact id format.
InvalidOntologyIdFormat=Invalid ontology id format.
DeleteOntology.InvalidArgMsg.OntologyId=Please specify a valid ontology identifier.
ShowAuditTrail.EntriesSummary=Artifact Audit Trail ({0} entries)
NoOntologyFeed=There is no ontology feed available, try "ontology:list" first.
DeleteOntology.Deleted=Successfully deleted the ontology.
DeleteOntology.DeleteFailed=FAILED to get the list of ontologies.
ListOntologies.Summary=Ontologies ({0} entries)
ListOntologies.Base=Base
ListOntologies.Failed=FAILED to get the list of ontologies.
UploadOntology.InvalidArgMsg.MissingPath=Please specify a path to a local ontology file.
UploadOntology.ReadingOntology=Reading from ontology file {0}
UploadOntology.CannotFind=ERROR: Cannot find {0}
UploadOntology.SuccessfulUpload=Successfully uploaded a new ontology to the Artificer repository.
UploadOntology.UploadFailed=FAILED to upload an ontology.
NoActiveArtifact=No active Artificer artifact exists.  Use getMetaData.
Classification.InvalidArgMsg.SubCommand=Please specify a sub-command (add, remove, clear).
Classification.InvalidArgMsg.ClassificationUri=Please specify a classification URI.
Classification.ClassificationAdded=Successfully added classification "{0}".
Classification.ClassificationRemoved=Successfully removed classification "{0}".
Classification.ClassificationDoesNotExist=Classification "{0}" does not exist on the active artifact.
Classification.AllRemoved=Successfully removed all classifications.
Classification.NoneExist=No classifications exist on the active artifact.
Classification.InvalidSubCommand=Invalid sub-command, must be one of ["add", "remove", "clear"].
Classification.ModificationFailed=FAILED to modify the artifact''s classifications.
Connect.InvalidArgMsg.NoUrl=Please specify a valid s-ramp URL.
Connect.Success=Successfully connected to Artificer endpoint: {0}
Connect.Failure=FAILED to connect to Artificer endpoint: {0}
Connect.UserPrompt=Artificer Username: 
Connect.PasswordPrompt=Artificer Password: 
Delete.Success=Successfully deleted artifact "{0}".
Delete.Failure=FAILED to delete the artifact.
Disconnect.Success=Successfully disconnected from the Artificer repository.
GetContent.InvalidArgMsg.OutputPath=Please specify an output path (file or directory).
GetContent.OutputFileExists=Output file already exists: {0}
GetContent.ContentSaved=Artifact content saved to {0}
GetMetaData.MetaDataLabel=Meta Data for: {0}
GetMetaData.OutputFileExists=Output file already exists: {0}
GetMetaData.SavedTo=Artifact meta-data saved to {0}
InvalidArgMsg.ArtifactId=Please specify a valid artifact identifier.
Property.InvalidArgMsg.SubCommand=Please specify a sub-command (set, unset).
Property.InvalidArgMsg.PropertyName=Please specify a property name.
Property.PropertySet=Successfully set property {0}.
Property.PropertyUnset=Successfully unset property {0}.
Property.InvalidSubCommand=Invalid sub-command, must be either "set" or "unset".
Property.Failure=FAILED to change the artifact property.
Query.InvalidArgMsg.MissingQuery=Please specify a valid Artificer query.
Query.TooManyArgs=Too many arguments: did you perhaps forget to surround your Artificer query in quotes?
Query.Querying=Querying the Artificer repository:
Query.AtomFeedSummary=Atom Feed ({0} entries)
Query.Failure=FAILED to query the repository.
RefreshMetaData.Success=Successfully refreshed meta-data for artifact "{0}".
RefreshMetaData.MetaDataFor=Meta Data for: {0}
RefreshMetaData.Failure=FAILED to update the artifact.
Status.Status1= Artificer Connection: <not currently connected>
Status.Status2= Artificer Connection: {0}
Status.Status3=   Artificer Artifact: <none currently active>
Status.Status4=   Artificer Artifact: {0} {1}
Status.Status5=     Artifact Feed: <none currently active>
OntologyStatus.Status1=     Ontology Feed: <none currently active>
OntologyStatus.Status2=     Ontology Feed: {0} items
UpdateMetaData.Success=Successfully updated artifact {0}.
UpdateMetaData.Failure=FAILED to update the artifact.
Upload.InvalidArgMsg.LocalFile=Please specify a path to a local file.
Upload.Success=Successfully uploaded an artifact.
Upload.Failure=FAILED to upload an artifact.
PrintArtifact.CoreHeading=  -- Core Artificer Info --
PrintArtifact.Type=Type
PrintArtifact.Model=Model
PrintArtifact.UUID=UUID
PrintArtifact.Name=Name
PrintArtifact.Version=Version
PrintArtifact.Derived=Derived
PrintArtifact.CreatedBy=Created By
PrintArtifact.CreatedOn=Created On
PrintArtifact.ModifiedBy=Modified By
PrintArtifact.ModifiedOn=Modified On
PrintArtifact.DescriptionHeading=  -- Description --
PrintArtifact.ClassifiersHeading=  -- Classifiers --
PrintArtifact.ClassifiedBy=Classified By
PrintArtifact.CustomPropsHeading=  -- Custom Properties --
PrintArtifact.GenericRelationshipsHeading=  -- Generic Relationships --
PrintArtifact.CommentsHeading=  -- Comments --
PrintArtifact.DerivedArtifactInfoHeading=  -- Derived Artifact Info --
PrintArtifact.RelatedDoc=Related Document
PrintArtifact.DocumentInfoHeading=  -- Document Info --
PrintArtifact.ContentType=Content Type
PrintArtifact.ContentSize=Content Size
PrintArtifact.XmlDocumentHeading=  -- XML Document Info --
PrintArtifact.ContentEncoding=Content Encoding
PrintArtifact.NamedWsdlHeading=  -- Named WSDL Info --
PrintArtifact.NCName=NCName
GetOntology.InvalidArgMsg.OntologyId=Please specify a valid ontology identifier.
GetOntology.PathExists=Output location already exists: {0}
GetOntology.InvalidOutputPath=Invalid output path: {0}
GetOntology.OntologySaved=Ontology saved to {0}.
GetOntology.GetFailed=Failed to get the ontology.
UpdateOntology.InvalidArgMsg.OntologyId=Please specify a valid ontology identifier.
UpdateOntology.InvalidArgMsg.MissingPath=Please specify a path to a local ontology file.
UpdateOntology.ReadingOntology=Reading from ontology file {0}
UpdateOntology.CannotFind=ERROR: Cannot find {0}
UpdateOntology.SuccessfulUpdate=Successfully updated an ontology in the Artificer repository.
UpdateOntology.UpdateFailed=FAILED to update an ontology.
UploadArchive.Failure=Failed to upload an Artificer archive:
UploadArchive.Success=Artificer archive successfully uploaded (and closed).
FileShellCommandReader.NoConsole=User input required, but 'console' is unavailable.
DeployCommand.usage=maven:deploy <pathToFile> <groupId>:<artifactId>:<version>:[<type>]:[<classifier>] [<artifactType>]
DeployCommand.help=The "deploy" command uploads the content of a local file to\nthe Artificer repository, creating a new artifact with appropriate\nmaven meta-data (e.g. groupId, artifactId, version).\nThe artifact type can also optionally be provided.  If the artifact type is excluded,\nthe artifact type will be determined based on file extension.\n\nExample usages\:\n>  maven\:deploy /home/uname/files/myarchive.jar org.example\:my-archive\:1.0.1.Final\n>  maven\:deploy /home/uname/files/other-archive.war org.example\:other-archive\:2.0.7.Final\:war JavaWebApplication
DeployCommand.InvalidArgMsg.LocalFile=Please specify a path to a local file.
DeployCommand.InvalidArgMsg.GAVInfo=Please specify the Maven GAV (groupId, artifactId, version) \ninformation.  See command usage for details.
DeployCommand.InvalidArgMsg.GavFormat=Invalid GAV format.  See command usage for details.
DeployCommand.Success=Successfully deployed the artifact.
DeployCommand.Failure=FAILED to deploy the artifact.
DeployCommand.Failure.ReleaseArtifact.Exist=The {0}  artifact already exists in the repository. It is not allowed to update existing artifacts.
DeployCommand.FileNotFound=File not found: {0}
DeployCommand.TypeNotSet=Since the filename {0} does not include an extension, the Maven GAV argument must include the type.  See command usage for details.
DeployCommand.SnapshotNotAllowed=SNAPSHOT versions are not allowed, unless explicitly enabled with the following system property: sramp.config.maven.allow-snapshots=true.ArtifactName.Mandatory=Artifact Name is mandatory.
ArtifactModel.Mandatory=Artifact Model/Type is mandatory.
ArtifactModel.isDerived=The artifact you are trying to create is a derived artifact. It is\nnot possible to create derived artifacts with this command.
ArtifactModel.isDocument=The artifact you are trying to create is a document artifact. It is\nnot possible to create document artifacts with this command.
CreateArtifactCommand.Successful=Successfully created the artifact: {0}
InvalidArgMsg.propertiesFile.not.exist=The properties file specified does not exist. Please review the path introduced.
InvalidArgMsg.propertiesFile.error.reading=Has been an error reading the properties file.
InvalidArgMsg.propertiesFile.error.reading.line=The line {0} has not correct format and has not been parsed as a property.
ListEntryArchive.Entry.Not.Exist=The entry {0} does not exist in the current file opened.
Archive.Path.Arg.should.not.contain.slash.end=The archive path arg should not contain a slash at the end. Not allowed format.
AddEntry.ArtificerArchiveException=There is a problem trying to perform the operation\:\n{0}
Echo.InvalidArgMsg.NoMessage=No message provided to the 'echo' command.
StoredQuery.Name.Mandatory=Stored query name is mandatory.
StoredQuery.Query.Mandatory=Stored query query-expression is mandatory.
CreateStoredQueryCommand.usage=createStoredQuery <name> <query-expression> <propertyName1,propertyName2,propertyName3,...>
CreateStoredQueryCommand.help=The "createStoredQuery" command creates a stored query in the repository.  Provide a name the query-expression.  Optionally provide a list of property names to indicate artifact property values that MUST be included in the feed resulting from the query execution.
DeleteStoredQueryCommand.usage=deleteStoredQuery <name>
DeleteStoredQueryCommand.help=The "deleteStoredQuery" command deletes the given stored query from the repository.
GetStoredQueryCommand.usage=getStoredQuery <name>
GetStoredQueryCommand.help=The "getStoredQuery" command retrives the given stored query from the repository.
ListStoredQueriesCommand.usage=listStoredQueries
ListStoredQueriesCommand.help=The "listStoredQueries" command retrieves all stored queries from the repository.
UpdateStoredQueryCommand.usage=updateStoredQuery <name> <query-expression> <propertyName1,propertyName2,propertyName3,...>
UpdateStoredQueryCommand.help=The "updateStoredQuery" command updates the given stored query in the repository.  Provide a name the query-expression.  Optionally provide a list of property names to indicate artifact property values that MUST be included in the feed resulting from the query execution.
ExecuteStoredQueryCommand.usage=executeStoredQuery <name>
ExecuteStoredQueryCommand.help=The "executeStoredQuery" command executes the given stored query.  The results are displayed identically to query.
CreateStoredQueryCommand.Success=Successfully created the stored query: {0}
CreateStoredQueryCommand.Fail=Failed to create the stored query: {0}
DeleteStoredQueryCommand.Success=Successfully deleted the stored query: {0}
DeleteStoredQueryCommand.Fail=Failed to delete the stored query: {0}
GetStoredQueryCommand.Fail=Failed to retrieve the stored query: {0}
ListStoredQueriesCommand.Fail=Failed to retrieve the stored queries
UpdateStoredQueryCommand.Success=Successfully updated the stored query: {0}
UpdateStoredQueryCommand.Fail=Failed to update the stored query: {0}
ExecuteStoredQueryCommand.Fail=Failed to execute the stored query: {0}
AddComment.Success=Comment successfully created.
AddComment.Failure=FAILED to add the comment!

Artifact.Arguments=Must include either an artifact UUID or a feed index
Ontology.Arguments=Must include either an artifact UUID or a feed index