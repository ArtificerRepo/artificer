Clients
-------

Java Client
~~~~~~~~~~~
The Overlord S-RAMP implementation provides a full-featured Java client library that can be
used to integrate with S-RAMP compliant servers.  This section of the guide describes how to use
this library.


Basic Usage
^^^^^^^^^^^
The S-RAMP client is a simple Java based client library and can be included in a Maven project
by including the following pom.xml dependency:

----
    <dependency>
      <groupId>org.overlord.sramp</groupId>
      <artifactId>s-ramp-client</artifactId>
      <version>${sramp.client.version}</version>
    </dependency>
----

Once the library is included in your project, you can use the client by instantiating the 
*SrampAtomApiClient* class.  Note that the client class supports pluggable authentication
mechanisms, although BASIC auth is a simple matter of including the username and password
upon construction of the client. 

Please refer to the javadoc of that class for details, but here are some usage examples to 
help you get started (code simplified for readability):

.'Upload an XSD document to S-RAMP'
----
SrampAtomApiClient client = new SrampAtomApiClient(urlToSramp);
String artifactFileName = getXSDArtifactName();
InputStream is = getXSDArtifactContentStream();
ArtifactType type = ArtifactType.XsdDocument();
BaseArtifactType artifact = client.uploadArtifact(ArtifactType.XsdDocument(), is, artifactFileName);
----

.'Create a custom artifact in S-RAMP (meta-data only, no file content)'
----
SrampAtomApiClient client = new SrampAtomApiClient(urlToSramp);
ExtendedArtifactType artifact = new ExtendedArtifactType();
artifact.setArtifactType(BaseArtifactEnum.EXTENDED_ARTIFACT_TYPE);
artifact.setExtendedType("MyArtifactType");
artifact.setName("My Test Artifact #1");
artifact.setDescription("Description of my test artifact.");
BaseArtifactType createdArtifact = client.createArtifact(artifact);
----

.'Retrieve full meta-data for an XSD artifact by its UUID'
----
SrampAtomApiClient client = new SrampAtomApiClient(urlToSramp);
String uuid = getArtifactUUID();
BaseArtifactType metaData = client.getArtifactMetaData(ArtifactType.XsdDocument(), uuid);
----

.'Retrieve artifact content'
----
SrampAtomApiClient client = new SrampAtomApiClient(urlToSramp);
String uuid = getArtifactUUID();
InputStream content = client.getArtifactContent(ArtifactType.XsdDocument(), uuid);
----

.'Query the S-RAMP repository (by artifact name)'
----
SrampAtomApiClient client = new SrampAtomApiClient(urlToSramp);
String artifactName = getArtifactName();
QueryResultSet rset = client.buildQuery("/s-ramp/xsd/XsdDocument[@name = ?]")
        .parameter(artifactName)
        .count(10)
        .query();
----

.'Query the S-RAMP repository using a stored query'
----
SrampAtomApiClient client = new SrampAtomApiClient(urlToSramp);

StoredQuery storedQuery = new StoredQuery();
storedQuery.setQueryName("FooQuery");
storedQuery.setQueryExpression("/s-ramp/ext/FooType");
storedQuery.getPropertyName().add("importantProperty1");
storedQuery.getPropertyName().add("importantProperty2");
client.createStoredQuery(storedQuery);

QueryResultSet rset = client.queryWithStoredQuery(storedQuery.getQueryName());
----


Extended Feature: Ontologies
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Although the S-RAMP specification is silent on how the API should support the
management of ontologies, the Overlord S-RAMP implementation provides an extension
to the Atom based REST API to support this.  Using any of the client's ontology
related methods will work when communicating with the Overlord implementation of
S-RAMP, but will likely fail when communicating with any other S-RAMP server.

The client supports adding, updating, and getting (both individual and a full list)
ontologies from the S-RAMP repository.


Extended Feature: Auditing
^^^^^^^^^^^^^^^^^^^^^^^^^^
The Overlord S-RAMP implementation also offers an extension to the Atom based
REST API to get and set auditing information for artifacts in the repository.


Extending: Custom Expander
^^^^^^^^^^^^^^^^^^^^^^^^^^
A special feature of the client is the ability to automatically expand archive
style artifacts (artifacts that are JARs, WARs, ZIPs, etc).  This feature is 
similar to how the server creates Derived content.  The result is that certain
files from the archive being uploaded as an S-RAMP artifact are extracted from
the archive and also uploaded to the server.  When this happens these "expanded"
artifacts are added with an S-RAMP relationship (expandedFromDocument) that 
points to the archive artifact they were expanded from.

The Overlord S-RAMP implementation comes with a few built-in expanders (e.g.
java archive, SwitchYard archive, etc).  Additionally, custom expanders can 
be created and provided by implementing *ZipToSrampArchiveProvider*.  In order
to tell the client about the custom provider, put it in a JAR along with a
file named:

*META-INF/services/org.overlord.sramp.atom.archive.expand.registry.ZipToSrampArchiveProvider*
  
The contents of the file should be a single line with the fully qualified 
Java classname of the provider implementation.
----