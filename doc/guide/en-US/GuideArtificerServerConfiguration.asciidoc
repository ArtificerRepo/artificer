Artificer Server Configuration
------------------------------

Out-of-the-box, Artificer provides a useful, default server configuration.  However, if you'd like to mold it into an
existing setup, here are a few areas that can be modified.

Remote Connections
~~~~~~~~~~~~~~~~~~

If you'd like to allow remote, non-localhost connections to Artificer, you'll need to change two items in
standalone-full.xml:

* In <interface name="public">, change the inet-address from "127.0.0.1" to "0.0.0.0".
* In the Keycloak subsystem, change the "auth-server-url" from "localhost" to your IP.

Hibernate
~~~~~~~~~

Out of the box, we provide a fairly standard set of Hibernate configuration defaults.  However, for power users, note
that *any* Hibernate property may be set, either in artificer.properties, environment variables, or System properties.
More specifically, literally *any* property prefixed by 'hibernate.' will be handed to Hibernate during Artificer
startup.  More specifics are below:

Datasource
~~~~~~~~~~

See the "Getting Started" section for information on Artificer's provided DDL.  We currently support Postgres,
MySQL, Oracle, SQL Server, DB2/IBM, and H2.

By default, Artificer installs a simple, file-based H2 datasource
(see `$JBOSS_HOME/standalone/deployments/artificer-h2-ds.xml`).  However, any other Wildfly/EAP datasource can be used.
Just edit the following in artificer.properties:

----
...
hibernate.dialect = org.hibernate.dialect.H2Dialect
hibernate.connection.driver_class = org.h2.Driver
hibernate.connection.datasource = java:jboss/datasources/artificerH2
hibernate.connection.username = sa
hibernate.connection.password = sa
...
----

Note that a datasource is *not* required, although we typically recommend them.  Plain JDBC connection URLs, including
external instances, are also fully supported (use `hibernate.connection.url`, `hibernate.connection.username`,
and `hibernate.connection.password`).  If a connection URL is used, Artificer will automatically wrap it with
HikariCP, a lightweight and extremely performant connection pool library.

Also note that Artificer ships with JDBC drivers for H2, MySQL, and Postgres.  With proper values in artificer.properties,
these databases should simply work out-of-the-box.  However, due to licensing, we cannot include the drivers for
Oracle, SQL Server, or DB2/IBM.  You'll need to ensure that their JDBC driver JAR(s) are available on the classpath,
typically through a Wildfly/EAP module.

File Content
~~~~~~~~~~~~

Artificer supports storing artifacts' file content on the filesystem or in JDBC Blobs.  By default, we use the Blob
approach.  However, this is configurable at runtime.  See the 'artificer.hibernate.filesystem.storage.path' property
in artificer.properties.  If a filesystem path is provided, all content will be stored there.  Otherwise, we assume Blobs.

Advanced Hibernate Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For detailed information of what's possible, please see the Hibernate docs themselves.  However, a few things to highlight:

* Second level entity caching is disabled by default.  Due to the nature of Artificer, where usage is typically focused
on large-scale queries, this caching can actually be a bit of a hindrance.  However, if you work repeatedly with
single artifacts, this may be beneficial in some contexts.  See the 'hibernate.cache.*' properties in artificer.properties.
* By default, we use Lucene filesystem indexes with Hibernate Search.  This is also highly configurable and can use
any number of backends.  See the 'hibernate.search.*' properties in artificer.properties.
* Also with Hibernate Search, many usages could benefit from hibernate-search-infinispan, which introduces in-memory
index caching (clusterable, etc.).  This is also disabled by default, but can be set with the correct properties
and including the hibernate-search-infinispan JAR.
See https://docs.jboss.org/author/display/WFLY8/JPA+Reference+Guide#JPAReferenceGuide-UsingtheInfinispansecondlevelcache
for more info.

WARNINGS
~~~~~~~~